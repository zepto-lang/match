(load "match")
(load "minitest/minitest")
(define minitest:assert-equal (import "minitest:assert-equal"))
((import "minitest:colorize") #t)
((import "minitest:verbose") #t)

(minitest:assert-equal
  "foo"
  (match (list 0)
    (((0) "foo")
     ((1) "bar")))
  "test that we can pattern match")

(minitest:assert-equal
  "foo"
  (match (list 0)
    (((_) "foo")))
  "test that the wildcard works")

(minitest:assert-equal
  "foo"
  (match (list 0)
    (((0) "foo")
     ((_) "bar")))
  "test that the first pattern is always used")

(minitest:assert-equal
  1
  (match (list 1 2)
    (((1 3) 100)
     ((2 2) 200)
     ((1 2) 1)))
  "test that we can pattern match multiple things")

(minitest:assert-equal
  #{foo bar}
  (match (list [1 2] 3)
    ((((1 2) 3) #{foo bar})))
  "test that we can match nested structures")

(minitest:assert-equal
  #{foo bar}
  (match (list [1 2] 3)
    (((_ 3) #{foo bar})))
  "test that we can wildcard nested structures")

(minitest:assert-equal
  #{foo bar}
  (match (list [1 2] 3)
    ((((1 _) 3) #{foo bar})))
  "test that we wildcard within nested structures")

(minitest:assert-equal
  2
  (match (list [1 2] 3)
    ((((1 x) 3) x)))
  "test that we bind within nested structures")

(minitest:assert-equal
  {foo bar}
  (match (list [1 (100 2)] 3)
    ((((1 (100 _)) 3) {foo bar})))
  "test that we wildcard within deeply nested structures")

(minitest:assert-equal
  2
  (match (list [1 (100 2)] 3)
    ((((1 (100 x)) 3) x)))
  "test that we bind within deeply nested structures")

((import "minitest:results"))
